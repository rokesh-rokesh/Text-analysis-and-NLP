# -*- coding: utf-8 -*-
"""task3to8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zwqFoE7UHK9SAQG4bbFZPuWjGTodt26e
"""

import re
from itertools import chain
import nltk
from nltk.tokenize import word_tokenize
from nltk.tokenize import sent_tokenize
from nltk.corpus import stopwords
from nltk.corpus import words
import os
import pandas as pd

nltk.download('all')
nltk.download('stopwords')

def Average_Number_of_Words_Per_Sentence(String):


  #Calculating Average Sentence Length

  total_number_of_words = len(word_tokenize(String))
  total_number_of_sentences = len(sent_tokenize(String))

  #Average Sentence Length = the number of words / the number of sentences
  Number_of_Words_Per_Sentence = round(total_number_of_words / total_number_of_sentences,2)
  print("Number_of_Words_Per_Sentence:",Number_of_Words_Per_Sentence)

  return Number_of_Words_Per_Sentence

def complex_words(String):

  #count complex words
  def count_syllables(word):
    return len(
        re.findall('(?!e$)[aeiouy]+', word, re.I) +
        re.findall('^[^aeiouy]*e$', word, re.I)
    )

  Complex = 0
  for w in String.split():
    if count_syllables(w) >= 2:
        Complex += 1

  print("Number of Complex words:",Complex)
  return Complex

def word_count(String):
  #removing the stop words

  #Calculating Average Sentence Length

  words = word_tokenize(String)

  filtered_words = [word for word in words if word.lower() not in stopwords.words('english')]

  #removing punctuations

  punctuation = '''!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'''
  for w in filtered_words:
    if w in punctuation:
      filtered_words.remove(w)

  Word_Count = len(filtered_words)
  print("Word_Count:",Word_Count)

  return Word_Count

def Syllable_Count_Per_Word(String):

  def syllable_count(word):
      word = word.lower()
      count = 0
      vowels = "aeiouy"
      if word[0] in vowels:
          count += 1
      for index in range(1, len(word)):
          if word[index] in vowels and word[index - 1] not in vowels:
              count += 1
      if word[-2:] == "es" or word[-2:] == "ed" :
          count -= 1
      if count == 0:
          count += 1
      return count

  total_syllable = 0
  for w in String.split():
    total_syllable += syllable_count(w)

  print("Syllable_Count_Per_Word:",total_syllable)

  return total_syllable

def Personal_Pronouns(String):

  #Personal pronouns
  pronoun = re.compile(r'\b(I|we|my|ours|(?-i:us))\b')
  pp = pronoun.findall(String)

  print("Personal_Pronouns:",len(pp))

  return len(pp)

def Average_Word_Length(String):

  #Sum of the total number of characters in each word

  characters = 0
  for w in String.split():
    characters += len(w)

  #Total number of words
  total_number_of_words = len(word_tokenize(String))

  #Average Word Length
  Average_Word_Length = round((characters / total_number_of_words),2)
  print("Average_Word_Length:",Average_Word_Length)

  return Average_Word_Length

#list
result1 = []
result2 = []
result3 = []
result4 = []
result5 = []
result6 = []

for i in range(37,151):
  f = open("/content/sample_data/"+str(i)+".txt",'r')
  #Converting String
  String = ''''''
  for j in f:
    String += " " + j

  #Result of task 3 to 8
  result1.append(Average_Number_of_Words_Per_Sentence(String))
  result2.append(complex_words(String))
  result3.append(word_count(String))
  result4.append(Syllable_Count_Per_Word(String))
  result5.append(Personal_Pronouns(String))
  result6.append(Average_Word_Length(String))

#Creating a dataframe for store and organize all results
df = pd.DataFrame(
    {'AVG NUMBER OF WORDS PER SENTENCE':result1,
     'COMPLEX WORD COUNT':result2,
     'WORD COUNT':result3,
     'SYLLABLE PER WORD':result4,
     'PERSONAL PRONOUNS':result5,
     'AVG WORD LENGTH':result6
     })

from google.colab import files
df.to_csv('task_3 to_8_result',index=False)
files.download('task_3 to_8_result')

